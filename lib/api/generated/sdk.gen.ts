// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from './client';
import type {
  GetLocationFeedsData,
  GetLocationFeedsResponses,
  GetLocationFeedsErrors,
  SendPushNotificationFeedsNotificationsPushPostData,
  SendPushNotificationFeedsNotificationsPushPostResponses,
  SendPushNotificationFeedsNotificationsPushPostErrors,
  GetLiveUsersData,
  GetLiveUsersResponses,
  GetLiveUsersErrors,
  CountLiveUsersData,
  CountLiveUsersResponses,
  CountLiveUsersErrors,
  GetSingleFeedData,
  GetSingleFeedResponses,
  GetSingleFeedErrors,
  GoLiveData,
  GoLiveResponses,
  GoLiveErrors,
  PublishPostData,
  PublishPostResponses,
  PublishPostErrors,
  GetCountryFeedData,
  GetCountryFeedResponses,
  GetCountryFeedErrors,
  GetScreenshotData,
  GetScreenshotResponses,
  GetScreenshotErrors,
  GenerateSocialMediaContentFeedsGenerateSocialMediaContentGetData,
  GenerateSocialMediaContentFeedsGenerateSocialMediaContentGetResponses,
  GenerateSocialMediaContentFeedsGenerateSocialMediaContentGetErrors,
  SendUserNotificationFeedsSendUserNotificationPostData,
  SendUserNotificationFeedsSendUserNotificationPostResponses,
  SendUserNotificationFeedsSendUserNotificationPostErrors,
  UploadUserPhotosData,
  UploadUserPhotosResponses,
  UploadUserPhotosErrors,
  UploadPhotoToLocationVerifyPhotosUploadToLocationPostData,
  UploadPhotoToLocationVerifyPhotosUploadToLocationPostResponses,
  UploadPhotoToLocationVerifyPhotosUploadToLocationPostErrors,
  SubmitUserVideoVerificationLocationUploadData,
  SubmitUserVideoVerificationLocationUploadResponses,
  SubmitUserVideoVerificationLocationUploadErrors,
  ExecuteUserVideoVerificationLocationUploadData,
  ExecuteUserVideoVerificationLocationUploadResponses,
  ExecuteUserVideoVerificationLocationUploadErrors,
  LiveWebhookData,
  LiveWebhookResponses,
  LiveWebhookErrors,
  GetLiveStreamTokenData,
  GetLiveStreamTokenResponses,
  GetLiveStreamTokenErrors,
  StartLiveData,
  StartLiveResponses,
  StartLiveErrors,
  StopLiveData,
  StopLiveResponses,
  StopLiveErrors,
  CreateUserData,
  CreateUserResponses,
  CreateUserErrors,
  GetUserData,
  GetUserResponses,
  GetUserErrors,
  UpdateVerificationVisibilityData,
  UpdateVerificationVisibilityResponses,
  UpdateVerificationVisibilityErrors,
  GetVerificationsData,
  GetVerificationsResponses,
  GetVerificationsErrors,
  GetUserVerificationData,
  GetUserVerificationResponses,
  GetUserVerificationErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  UpsertFcmData,
  UpsertFcmResponses,
  UpsertFcmErrors,
  GetFcmTokenData,
  GetFcmTokenResponses,
  GetFcmTokenErrors,
  DeleteFcmData,
  DeleteFcmResponses,
  DeleteFcmErrors,
  GetUserLocationData,
  GetUserLocationResponses,
  GetUserLocationErrors,
  DeleteUserData,
  DeleteUserResponses,
  DeleteUserErrors,
  CheckRegisteredUsersData,
  CheckRegisteredUsersResponses,
  CheckRegisteredUsersErrors,
  BlockUserBlockTargetIdPostData,
  BlockUserBlockTargetIdPostResponses,
  BlockUserBlockTargetIdPostErrors,
  UnblockUserUnblockTargetIdPostData,
  UnblockUserUnblockTargetIdPostResponses,
  UnblockUserUnblockTargetIdPostErrors,
  ReportUserReportTargetIdPostData,
  ReportUserReportTargetIdPostResponses,
  ReportUserReportTargetIdPostErrors,
  CheckUsernameUserCheckUsernameUsernameGetData,
  CheckUsernameUserCheckUsernameUsernameGetResponses,
  CheckUsernameUserCheckUsernameUsernameGetErrors,
  GetUserProfileUserProfileUserIdGetData,
  GetUserProfileUserProfileUserIdGetResponses,
  GetUserProfileUserProfileUserIdGetErrors,
  GetUserProfileByUsernameData,
  GetUserProfileByUsernameResponses,
  GetUserProfileByUsernameErrors,
  GetLocationFeedPaginatedData,
  GetLocationFeedPaginatedResponses,
  GetLocationFeedPaginatedErrors,
  SendFriendRequestData,
  SendFriendRequestResponses,
  SendFriendRequestErrors,
  GetFriendRequestsData,
  GetFriendRequestsResponses,
  GetFriendRequestsErrors,
  AcceptFriendRequestData,
  AcceptFriendRequestResponses,
  AcceptFriendRequestErrors,
  RejectFriendRequestData,
  RejectFriendRequestResponses,
  RejectFriendRequestErrors,
  GetFriendsListData,
  GetFriendsListResponses,
  GetFriendsListErrors,
  RemoveFriendData,
  RemoveFriendResponses,
  RemoveFriendErrors,
  GetBlockedFriendsData,
  GetBlockedFriendsResponses,
  GetBlockedFriendsErrors,
  UpdateMessageStateChatUpdateMessagesPostData,
  UpdateMessageStateChatUpdateMessagesPostResponses,
  UpdateMessageStateChatUpdateMessagesPostErrors,
  GetMessagesChatMessagesGetData,
  GetMessagesChatMessagesGetResponses,
  GetMessagesChatMessagesGetErrors,
  GetUserChatRoomsData,
  GetUserChatRoomsResponses,
  CreateChatRoomData,
  CreateChatRoomResponses,
  CreateChatRoomErrors,
  ExpireChatRoomChatExpireChatRoomPostData,
  ExpireChatRoomChatExpireChatRoomPostResponses,
  ExpireChatRoomChatExpireChatRoomPostErrors,
  SendPublicKeyChatSendPublicKeyPostData,
  SendPublicKeyChatSendPublicKeyPostResponses,
  SendPublicKeyChatSendPublicKeyPostErrors,
  GetMessageChatRoomData,
  GetMessageChatRoomResponses,
  GetMessageChatRoomErrors,
  GetNotificationsData,
  GetNotificationsResponses,
  GetNotificationsErrors,
  MarkNotificationsReadData,
  MarkNotificationsReadResponses,
  MarkNotificationsReadErrors,
  GetUnreadCountData,
  GetUnreadCountResponses,
  GetUnreadCountErrors,
  PokeUserLiveActionsPokeTargetUserIdPostData,
  PokeUserLiveActionsPokeTargetUserIdPostResponses,
  PokeUserLiveActionsPokeTargetUserIdPostErrors,
  MessageUserLiveActionsMessageTargetUserIdPostData,
  MessageUserLiveActionsMessageTargetUserIdPostResponses,
  MessageUserLiveActionsMessageTargetUserIdPostErrors,
  LikeVerificationData,
  LikeVerificationResponses,
  LikeVerificationErrors,
  UnlikeVerificationData,
  UnlikeVerificationResponses,
  UnlikeVerificationErrors,
  GetVerificationLikesCountData,
  GetVerificationLikesCountResponses,
  GetVerificationLikesCountErrors,
  TrackImpressionsData,
  TrackImpressionsResponses,
  TrackImpressionsErrors,
  GetImpressionsCountData,
  GetImpressionsCountResponses,
  GetImpressionsCountErrors,
  RateFactCheckData,
  RateFactCheckResponses,
  RateFactCheckErrors,
  UnrateFactCheckData,
  UnrateFactCheckResponses,
  UnrateFactCheckErrors,
  GetFactCheckRatingsCountData,
  GetFactCheckRatingsCountResponses,
  GetFactCheckRatingsCountErrors,
  GetFactCheckData,
  GetFactCheckResponses,
  GetFactCheckErrors,
  GetRoomPreviewDataData,
  GetRoomPreviewDataResponses,
  GetRoomPreviewDataErrors,
  StopStreamData,
  StopStreamResponses,
  StopStreamErrors,
  CreateStreamData,
  CreateStreamResponses,
  CreateStreamErrors,
  CreateSpaceData,
  CreateSpaceResponses,
  CreateSpaceErrors,
  InviteToStageData,
  InviteToStageResponses,
  InviteToStageErrors,
  RemoveFromStageData,
  RemoveFromStageResponses,
  RemoveFromStageErrors,
  RaiseHandData,
  RaiseHandResponses,
  RaiseHandErrors,
  SubscribeSpaceData,
  SubscribeSpaceResponses,
  SubscribeSpaceErrors,
  TriggerSpaceStartData,
  TriggerSpaceStartResponses,
  TriggerSpaceStartErrors,
  CreateCommentCommentsPostData,
  CreateCommentCommentsPostResponses,
  CreateCommentCommentsPostErrors,
  GetVerificationCommentsData,
  GetVerificationCommentsResponses,
  GetVerificationCommentsErrors,
  UnlikeCommentData,
  UnlikeCommentResponses,
  UnlikeCommentErrors,
  LikeCommentData,
  LikeCommentResponses,
  LikeCommentErrors,
  GetVerificationCommentsCountData,
  GetVerificationCommentsCountResponses,
  GetVerificationCommentsCountErrors,
  DeleteCommentData,
  DeleteCommentResponses,
  DeleteCommentErrors,
  RemoveReactionData,
  RemoveReactionResponses,
  RemoveReactionErrors,
  GetCommentReactionsCommentsCommentIdReactionsGetData,
  GetCommentReactionsCommentsCommentIdReactionsGetResponses,
  GetCommentReactionsCommentsCommentIdReactionsGetErrors,
  AddOrUpdateReactionCommentsCommentIdReactionsPostData,
  AddOrUpdateReactionCommentsCommentIdReactionsPostResponses,
  AddOrUpdateReactionCommentsCommentIdReactionsPostErrors,
  GetCountryData,
  GetCountryResponses,
  EndpointHealthGetData,
  EndpointHealthGetResponses,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Location Feeds
 */
export const getLocationFeeds = <ThrowOnError extends boolean = false>(
  options: Options<GetLocationFeedsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLocationFeedsResponses,
    GetLocationFeedsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/locations',
    ...options,
  });
};

/**
 * Send Push Notification
 */
export const sendPushNotificationFeedsNotificationsPushPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SendPushNotificationFeedsNotificationsPushPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    SendPushNotificationFeedsNotificationsPushPostResponses,
    SendPushNotificationFeedsNotificationsPushPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/notifications/push',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Live Users
 */
export const getLiveUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetLiveUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLiveUsersResponses,
    GetLiveUsersErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/live-users',
    ...options,
  });
};

/**
 * Count Live Users
 */
export const countLiveUsers = <ThrowOnError extends boolean = false>(
  options: Options<CountLiveUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    CountLiveUsersResponses,
    CountLiveUsersErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/live-users/count',
    ...options,
  });
};

/**
 * Get Single Feed
 */
export const getSingleFeed = <ThrowOnError extends boolean = false>(
  options: Options<GetSingleFeedData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSingleFeedResponses,
    GetSingleFeedErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/single/{feed_id}',
    ...options,
  });
};

/**
 * Go Live
 */
export const goLive = <ThrowOnError extends boolean = false>(
  options: Options<GoLiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GoLiveResponses,
    GoLiveErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/go-live',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Publish Post
 */
export const publishPost = <ThrowOnError extends boolean = false>(
  options: Options<PublishPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PublishPostResponses,
    PublishPostErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: 'json',
    url: '/feeds/publish-post',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Get Country Feed
 */
export const getCountryFeed = <ThrowOnError extends boolean = false>(
  options?: Options<GetCountryFeedData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCountryFeedResponses,
    GetCountryFeedErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/get-country-feed',
    ...options,
  });
};

/**
 * Get Screenshot
 * Generate and cache a screenshot for a verification ID.
 * Returns cached version if available, otherwise generates new screenshot.
 *
 * Args:
 * verification_id: The verification ID to generate screenshot for
 * tab: Content perspective (neutral, government, opposition)
 *
 * Returns:
 * Raw bytes of the screenshot image as JPEG format
 */
export const getScreenshot = <ThrowOnError extends boolean = false>(
  options: Options<GetScreenshotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetScreenshotResponses,
    GetScreenshotErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/screenshot',
    ...options,
  });
};

/**
 * Generate Social Media Content
 * Generate social media content by selecting an appropriate news article or fact check,
 * generating title/description, and creating a screenshot.
 *
 * Args:
 * tab: Content perspective (neutral, government, opposition)
 * include_fact_checks: Whether to include fact-checked content (is_generated_news=False)
 *
 * Returns:
 * Dictionary containing image_url, title, description, and verification_id
 */
export const generateSocialMediaContentFeedsGenerateSocialMediaContentGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GenerateSocialMediaContentFeedsGenerateSocialMediaContentGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    GenerateSocialMediaContentFeedsGenerateSocialMediaContentGetResponses,
    GenerateSocialMediaContentFeedsGenerateSocialMediaContentGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/generate-social-media-content',
    ...options,
  });
};

/**
 * Send User Notification
 * Send notification to a specific user
 * This endpoint is called by Google Cloud Tasks
 */
export const sendUserNotificationFeedsSendUserNotificationPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SendUserNotificationFeedsSendUserNotificationPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    SendUserNotificationFeedsSendUserNotificationPostResponses,
    SendUserNotificationFeedsSendUserNotificationPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/feeds/send-user-notification',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Upload Photos
 */
export const uploadUserPhotos = <ThrowOnError extends boolean = false>(
  options: Options<UploadUserPhotosData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadUserPhotosResponses,
    UploadUserPhotosErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: 'json',
    url: '/upload-photos',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Upload Photo To Location
 */
export const uploadPhotoToLocationVerifyPhotosUploadToLocationPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UploadPhotoToLocationVerifyPhotosUploadToLocationPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadPhotoToLocationVerifyPhotosUploadToLocationPostResponses,
    UploadPhotoToLocationVerifyPhotosUploadToLocationPostErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: 'json',
    url: '/verify-photos/upload-to-location',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Submit User Video Verification Location Upload
 */
export const submitUserVideoVerificationLocationUpload = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SubmitUserVideoVerificationLocationUploadData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SubmitUserVideoVerificationLocationUploadResponses,
    SubmitUserVideoVerificationLocationUploadErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: 'json',
    url: '/verify-videos/upload-to-location',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Execute User Video Verification Location Upload
 */
export const executeUserVideoVerificationLocationUpload = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    ExecuteUserVideoVerificationLocationUploadData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    ExecuteUserVideoVerificationLocationUploadResponses,
    ExecuteUserVideoVerificationLocationUploadErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/verify-videos/execute/location-upload',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Web
 */
export const liveWebhook = <ThrowOnError extends boolean = false>(
  options?: Options<LiveWebhookData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LiveWebhookResponses,
    LiveWebhookErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live/webhook',
    ...options,
  });
};

/**
 * Get Live Stream Token
 */
export const getLiveStreamToken = <ThrowOnError extends boolean = false>(
  options: Options<GetLiveStreamTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLiveStreamTokenResponses,
    GetLiveStreamTokenErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live/get-live-stream-token',
    ...options,
  });
};

/**
 * Start Live
 */
export const startLive = <ThrowOnError extends boolean = false>(
  options: Options<StartLiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    StartLiveResponses,
    StartLiveErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live/request-live',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Stop Live
 */
export const stopLive = <ThrowOnError extends boolean = false>(
  options: Options<StopLiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    StopLiveResponses,
    StopLiveErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live/stop-live',
    ...options,
  });
};

/**
 * Create User
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponses,
    CreateUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/create-user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserResponses,
    GetUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/get-user',
    ...options,
  });
};

/**
 * Update Verification Visibility
 */
export const updateVerificationVisibility = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateVerificationVisibilityData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UpdateVerificationVisibilityResponses,
    UpdateVerificationVisibilityErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/update-verification-visibility',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Verifications
 */
export const getVerifications = <ThrowOnError extends boolean = false>(
  options?: Options<GetVerificationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetVerificationsResponses,
    GetVerificationsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/get-verifications',
    ...options,
  });
};

/**
 * Get User Verification
 */
export const getUserVerification = <ThrowOnError extends boolean = false>(
  options: Options<GetUserVerificationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserVerificationResponses,
    GetUserVerificationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/get-verification',
    ...options,
  });
};

/**
 * Update User
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponses,
    UpdateUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Upsert Fcm
 */
export const upsertFcm = <ThrowOnError extends boolean = false>(
  options?: Options<UpsertFcmData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    UpsertFcmResponses,
    UpsertFcmErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/upsert-fcm',
    ...options,
  });
};

/**
 * Get Fcm Token
 */
export const getFcmToken = <ThrowOnError extends boolean = false>(
  options?: Options<GetFcmTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFcmTokenResponses,
    GetFcmTokenErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/get-fcm',
    ...options,
  });
};

/**
 * Delete Fcm
 */
export const deleteFcm = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteFcmData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteFcmResponses,
    DeleteFcmErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/delete-fcm',
    ...options,
  });
};

/**
 * Get User Location
 */
export const getUserLocation = <ThrowOnError extends boolean = false>(
  options: Options<GetUserLocationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    GetUserLocationResponses,
    GetUserLocationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/location',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete User
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/delete',
    ...options,
  });
};

/**
 * Check Registered Users
 */
export const checkRegisteredUsers = <ThrowOnError extends boolean = false>(
  options: Options<CheckRegisteredUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CheckRegisteredUsersResponses,
    CheckRegisteredUsersErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/check_registered_users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Block
 */
export const blockUserBlockTargetIdPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BlockUserBlockTargetIdPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    BlockUserBlockTargetIdPostResponses,
    BlockUserBlockTargetIdPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/block/{target_id}',
    ...options,
  });
};

/**
 * Unblock
 */
export const unblockUserUnblockTargetIdPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UnblockUserUnblockTargetIdPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UnblockUserUnblockTargetIdPostResponses,
    UnblockUserUnblockTargetIdPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/unblock/{target_id}',
    ...options,
  });
};

/**
 * Report
 */
export const reportUserReportTargetIdPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReportUserReportTargetIdPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ReportUserReportTargetIdPostResponses,
    ReportUserReportTargetIdPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/report/{target_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check Username
 */
export const checkUsernameUserCheckUsernameUsernameGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CheckUsernameUserCheckUsernameUsernameGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    CheckUsernameUserCheckUsernameUsernameGetResponses,
    CheckUsernameUserCheckUsernameUsernameGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/check-username/{username}',
    ...options,
  });
};

/**
 * Get User Profile
 */
export const getUserProfileUserProfileUserIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserProfileUserProfileUserIdGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserProfileUserProfileUserIdGetResponses,
    GetUserProfileUserProfileUserIdGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/profile/{user_id}',
    ...options,
  });
};

/**
 * Get User Profile By Username
 */
export const getUserProfileByUsername = <ThrowOnError extends boolean = false>(
  options: Options<GetUserProfileByUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserProfileByUsernameResponses,
    GetUserProfileByUsernameErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/profile/username/{username}',
    ...options,
  });
};

/**
 * Get Location Feed Paginated
 */
export const getLocationFeedPaginated = <ThrowOnError extends boolean = false>(
  options: Options<GetLocationFeedPaginatedData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLocationFeedPaginatedResponses,
    GetLocationFeedPaginatedErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/user/feed/location-feed/{feed_id}',
    ...options,
  });
};

/**
 * Send Friend Request
 */
export const sendFriendRequest = <ThrowOnError extends boolean = false>(
  options: Options<SendFriendRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendFriendRequestResponses,
    SendFriendRequestErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/request',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Friend Requests
 */
export const getFriendRequests = <ThrowOnError extends boolean = false>(
  options?: Options<GetFriendRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFriendRequestsResponses,
    GetFriendRequestsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/requests',
    ...options,
  });
};

/**
 * Accept Friend Request
 */
export const acceptFriendRequest = <ThrowOnError extends boolean = false>(
  options: Options<AcceptFriendRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    AcceptFriendRequestResponses,
    AcceptFriendRequestErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/request/{request_id}/accept',
    ...options,
  });
};

/**
 * Reject Friend Request
 */
export const rejectFriendRequest = <ThrowOnError extends boolean = false>(
  options: Options<RejectFriendRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    RejectFriendRequestResponses,
    RejectFriendRequestErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/request/{request_id}/reject',
    ...options,
  });
};

/**
 * Get Friends List
 */
export const getFriendsList = <ThrowOnError extends boolean = false>(
  options?: Options<GetFriendsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFriendsListResponses,
    GetFriendsListErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/list',
    ...options,
  });
};

/**
 * Remove Friend
 */
export const removeFriend = <ThrowOnError extends boolean = false>(
  options: Options<RemoveFriendData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveFriendResponses,
    RemoveFriendErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/remove/{friend_id}',
    ...options,
  });
};

/**
 * Blocked Friends
 */
export const getBlockedFriends = <ThrowOnError extends boolean = false>(
  options?: Options<GetBlockedFriendsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBlockedFriendsResponses,
    GetBlockedFriendsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/friends/blocked',
    ...options,
  });
};

/**
 * Update Message State
 */
export const updateMessageStateChatUpdateMessagesPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateMessageStateChatUpdateMessagesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UpdateMessageStateChatUpdateMessagesPostResponses,
    UpdateMessageStateChatUpdateMessagesPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/update-messages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Messages
 */
export const getMessagesChatMessagesGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetMessagesChatMessagesGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMessagesChatMessagesGetResponses,
    GetMessagesChatMessagesGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/messages',
    ...options,
  });
};

/**
 * Get User Chat Rooms
 */
export const getUserChatRooms = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserChatRoomsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserChatRoomsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/chat-rooms',
    ...options,
  });
};

/**
 * Create Chat Room
 */
export const createChatRoom = <ThrowOnError extends boolean = false>(
  options: Options<CreateChatRoomData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateChatRoomResponses,
    CreateChatRoomErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/create-chat-room',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Expire Chat Room
 */
export const expireChatRoomChatExpireChatRoomPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ExpireChatRoomChatExpireChatRoomPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ExpireChatRoomChatExpireChatRoomPostResponses,
    ExpireChatRoomChatExpireChatRoomPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/expire-chat-room',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Send Public Key
 */
export const sendPublicKeyChatSendPublicKeyPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SendPublicKeyChatSendPublicKeyPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendPublicKeyChatSendPublicKeyPostResponses,
    SendPublicKeyChatSendPublicKeyPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/send-public-key',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Chat Room
 */
export const getMessageChatRoom = <ThrowOnError extends boolean = false>(
  options: Options<GetMessageChatRoomData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMessageChatRoomResponses,
    GetMessageChatRoomErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/chat/message-chat-room',
    ...options,
  });
};

/**
 * Get Notifications
 */
export const getNotifications = <ThrowOnError extends boolean = false>(
  options?: Options<GetNotificationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetNotificationsResponses,
    GetNotificationsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/notifications',
    ...options,
  });
};

/**
 * Mark Notifications Read
 */
export const markNotificationsRead = <ThrowOnError extends boolean = false>(
  options?: Options<MarkNotificationsReadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    MarkNotificationsReadResponses,
    MarkNotificationsReadErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/notifications/mark-read',
    ...options,
  });
};

/**
 * Get Unread Count
 */
export const getUnreadCount = <ThrowOnError extends boolean = false>(
  options?: Options<GetUnreadCountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUnreadCountResponses,
    GetUnreadCountErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/notifications/unread-count',
    ...options,
  });
};

/**
 * Poke User
 */
export const pokeUserLiveActionsPokeTargetUserIdPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PokeUserLiveActionsPokeTargetUserIdPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PokeUserLiveActionsPokeTargetUserIdPostResponses,
    PokeUserLiveActionsPokeTargetUserIdPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/poke/{target_user_id}',
    ...options,
  });
};

/**
 * Message User
 */
export const messageUserLiveActionsMessageTargetUserIdPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    MessageUserLiveActionsMessageTargetUserIdPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    MessageUserLiveActionsMessageTargetUserIdPostResponses,
    MessageUserLiveActionsMessageTargetUserIdPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/message/{target_user_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Like Verification
 */
export const likeVerification = <ThrowOnError extends boolean = false>(
  options: Options<LikeVerificationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LikeVerificationResponses,
    LikeVerificationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/like-verification/{verification_id}',
    ...options,
  });
};

/**
 * Unlike Verification
 */
export const unlikeVerification = <ThrowOnError extends boolean = false>(
  options: Options<UnlikeVerificationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnlikeVerificationResponses,
    UnlikeVerificationErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/unlike-verification/{verification_id}',
    ...options,
  });
};

/**
 * Get Verification Likes Count
 */
export const getVerificationLikesCount = <ThrowOnError extends boolean = false>(
  options: Options<GetVerificationLikesCountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetVerificationLikesCountResponses,
    GetVerificationLikesCountErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/verification-likes/{verification_id}',
    ...options,
  });
};

/**
 * Track Impressions
 */
export const trackImpressions = <ThrowOnError extends boolean = false>(
  options: Options<TrackImpressionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TrackImpressionsResponses,
    TrackImpressionsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/track-impressions/{verification_id}',
    ...options,
  });
};

/**
 * Get Impressions Count
 */
export const getImpressionsCount = <ThrowOnError extends boolean = false>(
  options: Options<GetImpressionsCountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetImpressionsCountResponses,
    GetImpressionsCountErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/get-impressions/{verification_id}',
    ...options,
  });
};

/**
 * Rate Fact Check
 */
export const rateFactCheck = <ThrowOnError extends boolean = false>(
  options: Options<RateFactCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RateFactCheckResponses,
    RateFactCheckErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/rate-fact-check/{verification_id}',
    ...options,
  });
};

/**
 * Unrate Fact Check
 */
export const unrateFactCheck = <ThrowOnError extends boolean = false>(
  options: Options<UnrateFactCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnrateFactCheckResponses,
    UnrateFactCheckErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/unrate-fact-check/{verification_id}',
    ...options,
  });
};

/**
 * Get Fact Check Ratings Count
 */
export const getFactCheckRatingsCount = <ThrowOnError extends boolean = false>(
  options: Options<GetFactCheckRatingsCountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFactCheckRatingsCountResponses,
    GetFactCheckRatingsCountErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/fact-check-ratings/{verification_id}',
    ...options,
  });
};

/**
 * Get Fact Check
 */
export const getFactCheck = <ThrowOnError extends boolean = false>(
  options: Options<GetFactCheckData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFactCheckResponses,
    GetFactCheckErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/live-actions/fact-check/{verification_id}',
    ...options,
  });
};

/**
 * Get Room Preview Data
 */
export const getRoomPreviewData = <ThrowOnError extends boolean = false>(
  options: Options<GetRoomPreviewDataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRoomPreviewDataResponses,
    GetRoomPreviewDataErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/preview/{livekit_room_name}',
    ...options,
  });
};

/**
 * Stop Stream
 */
export const stopStream = <ThrowOnError extends boolean = false>(
  options: Options<StopStreamData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    StopStreamResponses,
    StopStreamErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/stop-stream',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create Stream
 */
export const createStream = <ThrowOnError extends boolean = false>(
  options: Options<CreateStreamData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateStreamResponses,
    CreateStreamErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/create-stream',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create Space
 * Creates a 'space' (analogous to a LiveKit room) and inserts a new Verification document.
 * - If scheduled_at is in the future, we set the space_state to 'scheduled'.
 * - If no scheduled_at, we treat it as 'started' immediately.
 * - Optionally insert text_content to the verification doc.
 * - Also store 'creator_identity' with x_user_id in the doc and plan to store metadata in livekit.
 */
export const createSpace = <ThrowOnError extends boolean = false>(
  options?: Options<CreateSpaceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateSpaceResponses,
    CreateSpaceErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/create-space',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Invite To Stage
 * Allows the creator (x_user_id) to invite another participant (invitee_identity) to the stage by giving them publish permissions if they had their hand raised.
 */
export const inviteToStage = <ThrowOnError extends boolean = false>(
  options: Options<InviteToStageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    InviteToStageResponses,
    InviteToStageErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/invite-to-stage',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove From Stage
 * Removes participant from stage.
 * If participant_identity not given, remove the caller themself from stage.
 */
export const removeFromStage = <ThrowOnError extends boolean = false>(
  options: Options<RemoveFromStageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RemoveFromStageResponses,
    RemoveFromStageErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/remove-from-stage',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Raise Hand
 * Allows participant to set 'hand_raised' = True in metadata.
 * If they've also been invited, canPublish might be granted.
 */
export const raiseHand = <ThrowOnError extends boolean = false>(
  options: Options<RaiseHandData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RaiseHandResponses,
    RaiseHandErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/raise-hand',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Subscribe Space
 * Allows a user to subscribe to a space.
 * For example, track in a separate 'subscriptions' collection or a user list in the verification doc.
 */
export const subscribeSpace = <ThrowOnError extends boolean = false>(
  options: Options<SubscribeSpaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SubscribeSpaceResponses,
    SubscribeSpaceErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/subscribe-space',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Trigger Space Start
 * Called by a scheduled Cloud Task (or similar) to flip a 'scheduled' space to 'started',
 * then send notifications to all subscribed users in batches.
 */
export const triggerSpaceStart = <ThrowOnError extends boolean = false>(
  options: Options<TriggerSpaceStartData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TriggerSpaceStartResponses,
    TriggerSpaceStartErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/space/trigger-space-start',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create Comment
 */
export const createCommentCommentsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateCommentCommentsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCommentCommentsPostResponses,
    CreateCommentCommentsPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Verification Comments
 */
export const getVerificationComments = <ThrowOnError extends boolean = false>(
  options: Options<GetVerificationCommentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetVerificationCommentsResponses,
    GetVerificationCommentsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/verification/{verification_id}',
    ...options,
  });
};

/**
 * Unlike Comment
 */
export const unlikeComment = <ThrowOnError extends boolean = false>(
  options: Options<UnlikeCommentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UnlikeCommentResponses,
    UnlikeCommentErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/{comment_id}/like',
    ...options,
  });
};

/**
 * Like Comment
 */
export const likeComment = <ThrowOnError extends boolean = false>(
  options: Options<LikeCommentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LikeCommentResponses,
    LikeCommentErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/{comment_id}/like',
    ...options,
  });
};

/**
 * Get Verification Comments Count
 */
export const getVerificationCommentsCount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetVerificationCommentsCountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetVerificationCommentsCountResponses,
    GetVerificationCommentsCountErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/verification/{verification_id}/count',
    ...options,
  });
};

/**
 * Delete Comment Endpoint
 */
export const deleteComment = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCommentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCommentResponses,
    DeleteCommentErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/{comment_id}',
    ...options,
  });
};

/**
 * Remove Reaction
 * Remove the authenticated user's reaction from a comment.
 */
export const removeReaction = <ThrowOnError extends boolean = false>(
  options: Options<RemoveReactionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveReactionResponses,
    RemoveReactionErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/{comment_id}/reactions',
    ...options,
  });
};

/**
 * Get Comment Reactions
 * Get all reactions for a comment, including the current user's reaction.
 */
export const getCommentReactionsCommentsCommentIdReactionsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetCommentReactionsCommentsCommentIdReactionsGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCommentReactionsCommentsCommentIdReactionsGetResponses,
    GetCommentReactionsCommentsCommentIdReactionsGetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/{comment_id}/reactions',
    ...options,
  });
};

/**
 * Add Or Update Reaction
 * Add a new reaction or update an existing reaction for a comment.
 * Implements upsert logic - if user already has a reaction, it updates it.
 */
export const addOrUpdateReactionCommentsCommentIdReactionsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AddOrUpdateReactionCommentsCommentIdReactionsPostData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    AddOrUpdateReactionCommentsCommentIdReactionsPostResponses,
    AddOrUpdateReactionCommentsCommentIdReactionsPostErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/comments/{comment_id}/reactions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get Country
 */
export const getCountry = <ThrowOnError extends boolean = false>(
  options?: Options<GetCountryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCountryResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/get-country',
    ...options,
  });
};

/**
 * Endpoint
 */
export const endpointHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<EndpointHealthGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EndpointHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/health',
    ...options,
  });
};
