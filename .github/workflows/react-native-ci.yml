name: React Native CI/CD

on:
  push:
    branches:
      - dev
      - preview
      - main
      - 'release/**'
      - 'hotfix/**'
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'docs/**'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build type to run'
        options:
          - dev
          - prod-apk
          - prod-aab
          - ios-dev
          - ios-prod
          - publish-stores
          - all
      platform:
        type: choice
        description: 'Platform to build'
        default: 'all'
        options:
          - android
          - ios
          - all

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
  EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
  EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}
  GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  test:
    needs: check-skip
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run TypeScript check
        run: npm run typecheck

      # - name: 🧹 Run ESLint
      #   run: npm run lint

      - name: 🎨 Run Prettier check
        run: npm run format:check

  build-and-release:
    needs: test
    if: (github.event_name == 'push' && (
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/heads/hotfix/') ||
      github.ref == 'refs/heads/dev' ||
      github.ref == 'refs/heads/preview' ||
      github.ref == 'refs/heads/main'
      )) || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        platform: [android]
        include:
          - platform: ios
            runs-on: macos-latest
    runs-on: ${{ matrix.platform == 'ios' && 'macos-latest' || 'ubuntu-latest' }}
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          npm i -g eas-cli@latest

      - name: 🔖 Bump version and sync EAS (preview only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/preview'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          # Bump local version (patch) without tagging to keep repo/version in sync
          npm version patch --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "Bumped version to $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json || true
          git commit -m "chore(release): $VERSION [skip ci]" || echo "No version change to commit"
          git push || echo "Skip push (no changes)"
          # Sync remote app version (EAS) so builds use this version
          eas project:version:set "$VERSION" --non-interactive
          eas project:version:get

      - name: 📱 Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: 🔄 Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: 📋 Fix package.json main entry
        run: |
          # Check if jq is installed, if not install it
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Fix the main entry in package.json
          if [ -f ./package.json ]; then
            # Create a backup
            cp package.json package.json.bak
            # Update the package.json
            jq '.main = "node_modules/expo/AppEntry.js"' package.json > package.json.tmp && mv package.json.tmp package.json
            echo "Updated package.json main entry"
            cat package.json | grep "main"
          else
            echo "package.json not found"
            exit 1
          fi

      - name: 📱 Build Development APK
        if:
          github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'dev' || (
          github.event_name == 'push' && (
          github.ref == 'refs/heads/dev'
          ) && (matrix.platform == 'android' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'android')
          )
        run: |
          # Build with increased memory limit
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile development --local --non-interactive --output=./app-dev.apk
        env:
          NODE_ENV: development

      - name: 📱 Build Preview APK
        if: github.event_name == 'push' && (
          github.ref == 'refs/heads/preview' ||
          startsWith(github.ref, 'refs/heads/release/') ||
          startsWith(github.ref, 'refs/heads/hotfix/')
          ) && (matrix.platform == 'android' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'android')
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile preview --local --non-interactive --output=./app-preview.apk
        env:
          NODE_ENV: production

      - name: 📱 Build Production APK
        if: github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'prod-apk' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (matrix.platform == 'android' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'android'))
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile production-apk --local --non-interactive --output=./app-prod.apk
        env:
          NODE_ENV: production

      - name: 📱 Build Production AAB
        if: github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'prod-aab' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (matrix.platform == 'android' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'android'))
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile production --local --non-interactive --output=./app-prod.aab
        env:
          NODE_ENV: production

      - name: 📱 Build iOS Development
        if: ((github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'ios-dev') && (matrix.platform == 'ios' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ios')) || (github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop') && matrix.platform == 'ios')
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform ios --profile development --local --non-interactive --output=./app-ios-dev.app
        env:
          NODE_ENV: development

      - name: 📱 Build iOS Preview
        if: github.event_name == 'push' && (
          github.ref == 'refs/heads/preview' ||
          startsWith(github.ref, 'refs/heads/release/') ||
          startsWith(github.ref, 'refs/heads/hotfix/')
          ) && matrix.platform == 'ios'
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform ios --profile preview --local --non-interactive --output=./app-ios-preview.ipa
        env:
          NODE_ENV: production

      - name: 📱 Build iOS Production
        if: ((github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'ios-prod') && (matrix.platform == 'ios' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ios')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && matrix.platform == 'ios')
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform ios --profile production --local --non-interactive --output=./app-ios-prod.ipa
        env:
          NODE_ENV: production

      - name: 🚀 Submit to Play Store
        if: (github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'publish-stores') && (matrix.platform == 'android' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'android')
        run: |
          eas submit -p android --path ./app-prod.aab --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}

      - name: 🚀 Submit to App Store
        if: (github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'publish-stores') && (matrix.platform == 'ios' || github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ios')
        run: |
          eas submit -p ios --path ./app-ios-prod.ipa --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
          EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
          EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}

      - name: 🏷️ Generate build information
        id: build-info
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          VERSION=$(npx expo config --json | jq -r '.expo.version')
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          # Generate changelog from commit messages since last tag
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            git log $LAST_TAG..HEAD --pretty=format:"- %s" > changelog.md
          else
            git log --pretty=format:"- %s" -n 20 > changelog.md
          fi

      - name: 📝 Create GitHub Release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: 'Release v${{ steps.build-info.outputs.version }}-${{ steps.build-info.outputs.build_number }}'
          tag_name: 'v${{ steps.build-info.outputs.version }}-${{ steps.build-info.outputs.build_number }}'
          files: |
            ./app-dev.apk
            ./app-prod.apk
            ./app-prod.aab
            ./app-ios-dev.app
            ./app-ios-prod.ipa
          body_path: changelog.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-dev.apk
            ./app-preview.apk
            ./app-prod.apk
            ./app-prod.aab
            ./app-ios-dev.app
            ./app-ios-preview.ipa
            ./app-ios-prod.ipa
          retention-days: 7
